version: 2.1

# commands:
#   install_awscli:
#     description: Install AWS CLI v2
#     steps:
#       - run:
#           name: Install AWS CLI v2
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install

#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}   
#     steps:
#       - run:
#           name: Tear down environment with this ID ${CIRCLE_WORKFLOW_ID:0:7} 
#           when: on_fail
#           command: |
#             echo "Tearing down environment: << parameters.workflow_id >> "
#             aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> 
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.workflow_id >>)
#             if(( $SUCCESS==1 )); 
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test 

                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]